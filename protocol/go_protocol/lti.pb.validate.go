// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lti.proto

package go_protocol

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LtiAuthClaims with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LtiAuthClaims) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LtiAuthClaims with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LtiAuthClaimsMultiError, or
// nil if none found.
func (m *LtiAuthClaims) ValidateAll() error {
	return m.validate(true)
}

func (m *LtiAuthClaims) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for IsAdmin

	// no validation rules for RoomId

	// no validation rules for RoomTitle

	if all {
		switch v := interface{}(m.GetLtiCustomParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LtiAuthClaimsValidationError{
					field:  "LtiCustomParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LtiAuthClaimsValidationError{
					field:  "LtiCustomParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLtiCustomParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LtiAuthClaimsValidationError{
				field:  "LtiCustomParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LtiAuthClaimsMultiError(errors)
	}

	return nil
}

// LtiAuthClaimsMultiError is an error wrapping multiple validation errors
// returned by LtiAuthClaims.ValidateAll() if the designated constraints
// aren't met.
type LtiAuthClaimsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LtiAuthClaimsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LtiAuthClaimsMultiError) AllErrors() []error { return m }

// LtiAuthClaimsValidationError is the validation error returned by
// LtiAuthClaims.Validate if the designated constraints aren't met.
type LtiAuthClaimsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LtiAuthClaimsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LtiAuthClaimsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LtiAuthClaimsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LtiAuthClaimsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LtiAuthClaimsValidationError) ErrorName() string { return "LtiAuthClaimsValidationError" }

// Error satisfies the builtin error interface
func (e LtiAuthClaimsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLtiAuthClaims.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LtiAuthClaimsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LtiAuthClaimsValidationError{}

// Validate checks the field values on LtiCustomParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LtiCustomParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LtiCustomParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LtiCustomParamsMultiError, or nil if none found.
func (m *LtiCustomParams) ValidateAll() error {
	return m.validate(true)
}

func (m *LtiCustomParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLtiCustomDesign()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LtiCustomParamsValidationError{
					field:  "LtiCustomDesign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LtiCustomParamsValidationError{
					field:  "LtiCustomDesign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLtiCustomDesign()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LtiCustomParamsValidationError{
				field:  "LtiCustomDesign",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RoomDuration != nil {
		// no validation rules for RoomDuration
	}

	if m.AllowPolls != nil {
		// no validation rules for AllowPolls
	}

	if m.AllowSharedNotePad != nil {
		// no validation rules for AllowSharedNotePad
	}

	if m.AllowBreakoutRoom != nil {
		// no validation rules for AllowBreakoutRoom
	}

	if m.AllowRecording != nil {
		// no validation rules for AllowRecording
	}

	if m.AllowRtmp != nil {
		// no validation rules for AllowRtmp
	}

	if m.AllowViewOtherWebcams != nil {
		// no validation rules for AllowViewOtherWebcams
	}

	if m.AllowViewOtherUsersList != nil {
		// no validation rules for AllowViewOtherUsersList
	}

	if m.MuteOnStart != nil {
		// no validation rules for MuteOnStart
	}

	if len(errors) > 0 {
		return LtiCustomParamsMultiError(errors)
	}

	return nil
}

// LtiCustomParamsMultiError is an error wrapping multiple validation errors
// returned by LtiCustomParams.ValidateAll() if the designated constraints
// aren't met.
type LtiCustomParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LtiCustomParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LtiCustomParamsMultiError) AllErrors() []error { return m }

// LtiCustomParamsValidationError is the validation error returned by
// LtiCustomParams.Validate if the designated constraints aren't met.
type LtiCustomParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LtiCustomParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LtiCustomParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LtiCustomParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LtiCustomParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LtiCustomParamsValidationError) ErrorName() string { return "LtiCustomParamsValidationError" }

// Error satisfies the builtin error interface
func (e LtiCustomParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLtiCustomParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LtiCustomParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LtiCustomParamsValidationError{}

// Validate checks the field values on LtiCustomDesign with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LtiCustomDesign) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LtiCustomDesign with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LtiCustomDesignMultiError, or nil if none found.
func (m *LtiCustomDesign) ValidateAll() error {
	return m.validate(true)
}

func (m *LtiCustomDesign) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PrimaryColor != nil {
		// no validation rules for PrimaryColor
	}

	if m.SecondaryColor != nil {
		// no validation rules for SecondaryColor
	}

	if m.BackgroundColor != nil {
		// no validation rules for BackgroundColor
	}

	if m.CustomLogo != nil {
		// no validation rules for CustomLogo
	}

	if len(errors) > 0 {
		return LtiCustomDesignMultiError(errors)
	}

	return nil
}

// LtiCustomDesignMultiError is an error wrapping multiple validation errors
// returned by LtiCustomDesign.ValidateAll() if the designated constraints
// aren't met.
type LtiCustomDesignMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LtiCustomDesignMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LtiCustomDesignMultiError) AllErrors() []error { return m }

// LtiCustomDesignValidationError is the validation error returned by
// LtiCustomDesign.Validate if the designated constraints aren't met.
type LtiCustomDesignValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LtiCustomDesignValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LtiCustomDesignValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LtiCustomDesignValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LtiCustomDesignValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LtiCustomDesignValidationError) ErrorName() string { return "LtiCustomDesignValidationError" }

// Error satisfies the builtin error interface
func (e LtiCustomDesignValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLtiCustomDesign.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LtiCustomDesignValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LtiCustomDesignValidationError{}
